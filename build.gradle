ext.projectVersion = '1.0.2'

apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }
}

subprojects {
    sourceCompatibility = 1.7
    version = "$projectVersion"
    group = "com.megatome.javadoc2dash"

    def javaApiUrl = 'http://docs.oracle.com/javase/1.7.0/docs/api/'
    def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'
    tasks.withType(Javadoc) {
        options.links(javaApiUrl, groovyApiUrl)
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

def publishedProjects = subprojects.findAll {
    !it.path.startsWith(':j2d-cli')
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

project(":j2d-cli") {
    apply plugin:'application'

    mainClassName = "com.megatome.j2d.Main"

    dependencies {
        compile project(":j2d-api")
        compile 'net.sf.jopt-simple:jopt-simple:4.8'
    }
}

project(":j2d-gradle") {
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: "com.gradle.plugin-publish"

    archivesBaseName = 'javadoc2dash-plugin'

    dependencies {
        compile gradleApi()
        compile localGroovy()
        compile project(":j2d-api")

        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile("org.spockframework:spock-core:1.0-groovy-2.3") {
            exclude group: "org.codehaus.groovy"
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file://$projectDir/../../repo")
            }
        }
    }

    pluginBundle {
        website = 'https://github.com/iamthechad/javadoc2dash'
        vcsUrl = 'https://github.com/iamthechad/javadoc2dash'
        description = 'Create Dash docsets from Javadoc'
        tags = ['javadoc', 'dash']

        plugins {
            javadoc2dashPlugin {
                id = 'com.megatome.javadoc2dash'
                displayName = 'Javadoc to Dash'
            }
        }
    }
}

project(":j2d-api") {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    archivesBaseName = 'javadoc2dash-api'

    dependencies {
        compile 'commons-io:commons-io:2.4'
        compile 'org.apache.commons:commons-lang3:3.3.2'
        compile 'org.xerial:sqlite-jdbc:3.8.7'
        compile 'org.jsoup:jsoup:1.8.2'
        compile "org.slf4j:slf4j-api:1.7.12"
        compile "org.slf4j:slf4j-simple:1.7.12"

        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file://$projectDir/../../repo")
            }
        }
    }

    def pomConfig = {
        scm {
            connection "scm:git:git@github.com:iamthechad/javadoc2dash.git"
            developerConnection "scm:git:git@github.com:iamthechad/javadoc2dash.git"
            url "https://github.com/iamthechad/javadoc2dash"
        }
        issueManagement {
            system "Github Issue Tracker"
            url "https://github.com/iamthechad/javadoc2dash/issues"
        }
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "iamthechad"
                name "Chad Johnston"
                email "cjohnston@megatome.com"
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId archivesBaseName
                artifact sourceJar
                artifact javadocJar

                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'Javadoc to Dash API')
                    root.appendNode('url', 'https://github.com/iamthechad/jaadoc2dash')
                    root.appendNode('description', 'API for creating Dash docsets from Javadoc')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintray_user') ? project.bintray_user : System.getenv('bintray_user')
        key = project.hasProperty('bintray_key') ? project.bintray_key : System.getenv('bintray_key')
        publications = ['mavenJava']
        dryRun = false
        publish = false
        pkg {
            repo = 'maven'
            name = 'javadoc2dash-api'
            desc = 'API for creating Dash docsets from Javadoc'
            websiteUrl = 'https://github.com/iamthechad/javadoc2dash'
            issueTrackerUrl = 'https://github.com/iamthechad/javadoc2dash/issues'
            vcsUrl = 'https://github.com/iamthechad/javadoc2dash.git'
            licenses = ['Apache-2.0']
            labels = ['javadoc', 'dash', 'api']
            publicDownloadNumbers = true
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}