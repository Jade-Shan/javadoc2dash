{
  "name": "Javadoc to Dash",
  "tagline": "",
  "body": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\r\n\r\n- [Javadoc2Dash - Build Dash docsets from Javadoc](#javadoc2dash---build-dash-docsets-from-javadoc)\r\n- [Gradle plugin](#gradle-plugin)\r\n  - [Add the plugin to your project](#add-the-plugin-to-your-project)\r\n  - [Specify settings](#specify-settings)\r\n  - [Create the docset](#create-the-docset)\r\n    - [Example](#example)\r\n  - [Creating the docset feed](#creating-the-docset-feed)\r\n    - [Example](#example-1)\r\n- [Using the API](#using-the-api)\r\n  - [Add dependencies to your project](#add-dependencies-to-your-project)\r\n  - [Use the API](#use-the-api)\r\n- [Using the CLI](#using-the-cli)\r\n  - [Download the CLI](#download-the-cli)\r\n    - [Running in a cloned repository](#running-in-a-cloned-repository)\r\n    - [Running a release zip](#running-a-release-zip)\r\n  - [Creating a docset](#creating-a-docset)\r\n    - [Examples](#examples)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n# Javadoc2Dash - Build Dash docsets from Javadoc\r\n \r\nThis project is based off of https://github.com/Kapeli/javadocset. This is a Java-based solution so that Dash docsets\r\ncan be easily created from many environments, not just those that run OS X.\r\n\r\nThere are three ways to create Dash-compatible docsets from Javadoc using this project:\r\n\r\n1. Use the Gradle plugin\r\n1. Use the API\r\n1. Use the CLI\r\n\r\n# Gradle plugin\r\n\r\n## Add the plugin to your project\r\n\r\nBuild script snippet for use in all Gradle versions:\r\n\r\n\r\n    buildscript {\r\n      repositories {\r\n        maven {\r\n          url \"https://plugins.gradle.org/m2/\"\r\n        }\r\n      }\r\n      dependencies {\r\n        classpath \"gradle.plugin.com.megatome.javadoc2dash:j2d-gradle:1.0.7\"\r\n      }\r\n    }\r\n\r\n    apply plugin: \"com.megatome.javadoc2dash\"\r\n    \r\nBuild script snippet for new, incubating, plugin mechanism introduced in Gradle 2.1:\r\n\r\n    plugins {\r\n      id \"com.megatome.javadoc2dash\" version \"1.0.7\"\r\n    }\r\n\r\n## Specify settings\r\n\r\n    javadoc2dash {\r\n      displayName = \"My Cool Project\"\r\n    }\r\n    \r\nIf no settings are provided, the plugin tries to use sensible defaults.\r\n\r\nSetting Name | Type | Description | Default\r\n-------------|------|-------------|--------\r\n`docsetName` | `String` | File name of the created docset | `project.name`\r\n`javadocRoot`| `File` | Location of the javadoc files | `${project.docsDir}/javadoc` \r\n`outputLocation`| `File` | Location to create the docset | `${project.buildDir}`\r\n`displayName`| `String` | Name displayed in Dash | `project.name`\r\n`keyword` | `String` | Keyword used for the docset in Dash | `project.name`\r\n`iconFile` | `File` | File to be used as the docset icon | `null`\r\n`javadocTask` | `String` | Name of the javadoc task that the `javadoc2dash` task will depend on | `javadoc`\r\n\r\n**Some Caveats:**\r\n\r\n* The `iconFile` should be a 32x32 PNG file, but the plugin does **not** verify this.\r\n* You should only need to set the `javadocTask` property when the task you use to create Javadoc is non-standard. For example, there may be a task called `allJavadoc` in a multi-module\r\nproject to create an aggregated Javadoc. In this instance, `javadocTask` should be set to `allJavadoc` to ensure that the correct documentation is built before creating the docset.\r\n* This plugin applies the `java` plugin to the project it's run under. This means that in a multi-module project, a top level task named `javadoc` cannot be created to aggregate the\r\nsubprojects' documentation. The `java` plugin creates a `javadoc` task, so a different name is required - perhaps `allJavadoc`.\r\n\r\n## Create the docset\r\n\r\nCreate the docset with the `javadoc2dash` task.\r\n\r\n### Example\r\n\r\n    apply plugin: 'java'\r\n\r\n    sourceCompatibility = 1.5\r\n    version = '1.0'\r\n\r\n    buildscript {\r\n      repositories {\r\n        maven {\r\n          url \"https://plugins.gradle.org/m2/\"\r\n        }\r\n      }\r\n      dependencies {\r\n        classpath \"gradle.plugin.com.megatome.javadoc2dash:j2d-gradle:1.0.7\"\r\n      }\r\n    }\r\n\r\n    apply plugin: \"com.megatome.javadoc2dash\"\r\n\r\n    javadoc2dash {\r\n      docsetName = \"MyProject\"\r\n      displayName = \"My Awesome Project\"\r\n      keyword = \"mp\"\r\n    }\r\n    \r\n## Creating the docset feed\r\n\r\nIf you want to host your own docsets, you need to create a feed per the [Dash instructions](https://kapeli.com/docsets#dashdocsetfeed).\r\n\r\nCreating feeds uses the `javadoc2dashfeed` task.\r\n\r\n    javadoc2dashfeed {\r\n      feedLocations = [ \"http://someserver.com/feeds\", \"http://someotherserver.com/feeds\" ]\r\n    }\r\n    \r\nIf no settings are provided, the plugin tries to use sensible defaults.\r\n\r\nSetting Name | Type | Description | Default\r\n-------------|------|-------------|--------\r\n`feedName`   | `String` | File name to use for feed XML file | `project.name`\r\n`feedVersion`| `String` | Version to use in feed XML file | `project.version`\r\n`feedLocations` | `List<String>` | List of root URLs for hosting the docset | `null`\r\n\r\n### Example\r\n\r\n    apply plugin: 'java'\r\n\r\n    sourceCompatibility = 1.5\r\n    version = '1.0'\r\n\r\n    buildscript {\r\n      repositories {\r\n        maven {\r\n          url \"https://plugins.gradle.org/m2/\"\r\n        }\r\n      }\r\n      dependencies {\r\n        classpath \"gradle.plugin.com.megatome.javadoc2dash:j2d-gradle:1.0.7\"\r\n      }\r\n    }\r\n\r\n    apply plugin: \"com.megatome.javadoc2dash\"\r\n\r\n    javadoc2dash {\r\n      docsetName = \"MyProject\"\r\n      displayName = \"My Awesome Project\"\r\n      keyword = \"mp\"\r\n    }\r\n    \r\n    javadoc2dashfeed {\r\n      feedName = \"myproject\"\r\n      feedLocations = [ \"http://someserver.com/feeds\", \"http://someotherserver.com/feeds\" ]\r\n    }\r\n    \r\nThis will generate a `feed` directory in the `javadoc2dash.outputLocation` directory. This directory will contain an XML file describing the feed\r\n(named `myproject.xml` in this case), and a compressed version of the docset (named `myproject.tgz` in this case).\r\n\r\nFor this example, the XML file will look like this:\r\n\r\n    <entry>\r\n      <version>1.0</version>\r\n      <url>http://someserver.com/feeds/myproject.tgz</url>\r\n      <url>http://someotherserver.com/feeds/myproject.tgz</url>\r\n    </entry>\r\n    \r\nThe XML file should be copied to a location where it can be [shared with Dash users](https://kapeli.com/docsets#sharedocsetfeed), and the `tgz` file copied to the locations specified in `feedLocations`.\r\n\r\n# Using the API\r\n\r\n## Add dependencies to your project\r\n\r\nFor Gradle:\r\n\r\n    repositories {\r\n      jcenter()\r\n    }\r\n\r\n    dependencies {\r\n      compile \"com.megatome.javadoc2dash:javadoc2dash-api:1.0.7\"\r\n    }\r\n    \r\nFor Maven:\r\n\r\n    <dependency>\r\n      <groupId>com.megatome.javadoc2dash</groupId>\r\n      <artifactId>javadoc2dash-api</artifactId>\r\n      <version>1.0.7</version>\r\n    </dependency>\r\n    \r\n## Use the API\r\n\r\n    DocsetCreator.Builder builder = new DocsetCreator.Builder(docsetName, javadocLocation);\r\n    // Optionally -\r\n    builder.displayName(\"Some Name\").keyword(\"keyword\");\r\n    DocsetCreator creator = builder.build();\r\n    \r\n    try {\r\n      creator.makeDocset();\r\n    } catch (BuilderException e) {\r\n      // Something failed!\r\n    }\r\n    \r\n# Using the CLI\r\n\r\n## Download the CLI\r\n\r\nClone the project or grab the [latest release](https://github.com/iamthechad/javadoc2dash/releases). Running the utility will vary a bit depending on how you retrieve the project.\r\n\r\n### Running in a cloned repository\r\n\r\nRunning the CLI directly from a Gradle task is not currently supported. A distribution must be created via `gradlew :j2d-cli:distZip` to create a zip file containing everything needed to run.\r\n \r\n### Running a release zip\r\n\r\n* Either download a release or create a distribution zip as outlined above. \r\n* Unzip the archive to a desired location.\r\n* Open a terminal or command prompt and navigate to the unzipped directory.\r\n* Navigate to the `bin` directory and run `./j2d-cli` (for \\*NIX/OSX) or `j2d-cli.bat` (for Windows environments).\r\n* You should see a usage message.\r\n\r\n## Creating a docset\r\n\r\nDocset creation requires at minimum two options: the name of the docset and the location of the Javadoc files to include in the docset.\r\n  \r\n    ./j2d-cli --name Sample --javadoc /some/path/to/apidoc\r\n    \r\nThis will create a docset named Sample in the current directory. Docset creation can be customized with optional arguments:\r\n\r\n* `--displayName`: Will set the name as shown in Dash. This is handy if you create a docset with name `SampleProject` but display name `Sample Project` instead.\r\n    * This setting will default to the value of `--name` if omitted.\r\n* `--keyword`: Will set the keyword used to search in Dash. You could set the keyword for `SampleProject` to `sp`, for example.\r\n    * This setting will default to the value of `--name` if omitted.\r\n* `--icon`: Specify an icon to be used for the docset. Should be a 32x32 PNG, but this tool **does not verify the file's content**.\r\n    * No icon will be used if this is omitted.\r\n* `--out`: Specify a directory to create the docset in.\r\n    * The docset will be created in the current directory if omitted.\r\n    \r\n### Examples\r\n\r\nBare minimum: `j2d-cli --name Sample --javadoc /path/to/apidoc`\r\n\r\nFull options: `j2d-cli --name Sample --javadoc /path/to/apidoc --displayName \"Awesome Sample API\" --keyword asa --iconFile /path/to/icon.png --out /path/to/output`\r\n\r\nAbbreviated options. Most command-line options can be abbreviated. `j2d-cli -n Sample -j /path/to/apidoc -d \"Awesome Sample API\" -k asa -i /path/to/icon.png -o /path/to/output`\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}